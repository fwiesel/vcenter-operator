KOS Operator
=============

The KOS Operator configures kubernetes (K) based on the results of openstack (OS) api calls

Configuration
-------------------
The operator relies on ``OpenstackSeeds`` from the openstack-seeder_, which are queried first.
So, their information is available for subsequent resources.
They are followed by ``KosQueries``, which can use the credentials in the ``OpenstackSeeds`` to query openstack apis,
and store the results in variables, which are then available to all ``KosTemplates`` resources.

Convention
-------------------

KosQuery
^^^^^^^^^^^^^^^^
Queries can be issued by the resource definition ``KosQuery``.

Let's have a look at the following query:

::
    apiVersion: kos-operator.stable.sap.cc/v1
    kind: KosQuery
    metadata:
        name: baremetal-nodes
        namespace: monsoon3
    context: ironic@Default/service
    commands:
      nodes: "[node for node in os.baremetal.nodes()]"

context
    With the ``context`` attribute one specifies in which context the API request should be issued.
    The format is ``<user name>@<domain name>/<project name>``
    The credentials are taken form the OpenstackSeeds for the openstack-seeder_
    In the example, it would be the ironic service user in the Default domain and service project.

commands
    Commands are pairs of a name and a python command.
    The python command will be executed, and the result will be made available to all templates (``KosTemplate``) under the given name.
    Currently, you can query openstack with the openstacksdk_ connection under the name ``os``.
    A conversion to a list might be sensible to ensure that we have actual objects instead of an iterator, which can be queried only once.


KosTemplate
^^^^^^^^^^^^^^^^^^

A template can (currently) use any variable defined by any ``KosQuery``.

::
    apiVersion: kos-operator.stable.sap.cc/v1
    kind: KosTemplate
    metadata:
        name: baremetal-configmap
        namespace: monsoon3
    requirements:
    - name: baremetal-blocks
    template: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
            name: test
        data:
            a: {{ blocks | map('string') | join(',') | quote }}


requirements
    ``requirements`` is a list of requirements, which have to exists for the template to be actually applied.
    You have to give at least the name of the requirement, the namespace is then assumed to be the same as the template.
    If not, you can specify it with ``namespace``.

    As there is a high risk of duplicate names, it is sensible to be more specific about the source of variables.
    Eventually, the variables visible will be limited to those generated by the under requirements.

template
    The template is a jinja2 template, and all standard filters are available.
    If you want generate a ``KosTemplate`` resource and are bothered by having to quote the variable-start- and end quotes all the time,
    you can configure jinja2 to use different ones by adding to the metadata a map named ``jinja2_options``,
    setting ``variable_start_string``, ``variable_end_string`` (e.g. to ``{=`` and ``=}``).
    Any option here will be passed for the jinja2 interpreter (see jinja2_options_ for more).


.. _openstack-seeder: https://github.com/sapcc/kubernetes-operators/tree/master/openstack-seeder
.. _openstacksdk: https://github.com/openstack/openstacksdk
.. _jinja2_options: http://jinja.pocoo.org/docs/2.10/api/#jinja2.Environment